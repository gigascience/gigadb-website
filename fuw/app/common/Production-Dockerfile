ARG PHP_BASE_IMAGE_VERSION=7.1-fpm-stretch
FROM php:${PHP_BASE_IMAGE_VERSION}


# basic dependencies
RUN apt-get update -yq && \
    apt-get install -y --no-install-recommends \
        procps \
        curl \
        libmemcached-dev \
        libz-dev \
        libpq-dev \
        libjpeg-dev \
        libpng-dev \
        libfreetype6-dev \
        libssl-dev \
        bc \
        --no-install-recommends && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# install mcrypt to work with PHP 7.2 (first version that lacks mcrypt source)
RUN apt-get update && apt-get install -y libmcrypt-dev && \
    pecl install mcrypt-1.0.2 && \
    docker-php-ext-enable mcrypt && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install the PHP pdo_pgsql extention
RUN docker-php-ext-install pdo_pgsql

# Install the PHP bcmath extention
RUN docker-php-ext-install bcmath

# Install the PHP gd library
RUN docker-php-ext-install gd && \
    docker-php-ext-configure gd \
        --enable-gd-native-ttf \
        --with-jpeg-dir=/usr/lib \
        --with-freetype-dir && \
    docker-php-ext-install gd

# Set Environment Variables
ENV DEBIAN_FRONTEND noninteractive

# always run apt update when start and after add new source list, then clean up at end.
RUN apt-get update -yqq && \
    apt-get install -y apt-utils && \
    pecl channel-update pecl.php.net && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


ARG INSTALL_OPCACHE=false

RUN if [ ${INSTALL_OPCACHE} = true ]; then \
    docker-php-ext-install opcache \
;fi

# Copy opcache configration
#COPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini
# not done here, host-mounted upon instantiation

ARG INSTALL_INTL=false

RUN if [ ${INSTALL_INTL} = true ]; then \
    # Install intl and requirements
    apt-get update -yq && \
    apt-get install -y zlib1g-dev libicu-dev g++ && \
    docker-php-ext-configure intl && \
    docker-php-ext-install intl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
;fi


ARG INSTALL_PGSQL=false

RUN if [ ${INSTALL_PGSQL} = true ]; then \
    # Install the pgsql extension
    docker-php-ext-install pgsql \
;fi

ARG INSTALL_PG_CLIENT=false
ARG PG_CLIENT_VERSION=10.5

RUN if [ ${INSTALL_PG_CLIENT} = true ]; then \
    # Create folders if not exists (https://github.com/tianon/docker-brew-debian/issues/65)
    mkdir -p /usr/share/man/man1 && \
    mkdir -p /usr/share/man/man7 && \
    # Install the pgsql client
    apt-get update -yq && \
    apt-get install -y postgresql-client-${PG_CLIENT_VERSION} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
;fi


ARG INSTALL_XDEBUG=false

RUN if [ ${INSTALL_XDEBUG} = true ]; then \
  # Install the xdebug extension
  if [ $(php -r "echo PHP_MAJOR_VERSION;") = "5" ]; then \
    pecl install xdebug-2.5.5; \
  else \
    pecl install xdebug; \
  fi && \
  docker-php-ext-enable xdebug \
;fi


ARG INSTALL_NETCAT_JQ=false

RUN if [ ${INSTALL_NETCAT_JQ} = true ]; then \
    # Create folders if not exists (https://github.com/tianon/docker-brew-debian/issues/65)
    mkdir -p /usr/share/man/man1 && \
    mkdir -p /usr/share/man/man7 && \
    # Install netcat-openbsd and jq
    apt-get update -yq && \
    apt-get install -y netcat-openbsd jq && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
;fi

ARG INSTALL_GRAPHVIZ=false

RUN if [ ${INSTALL_GRAPHVIZ} = true ]; then \
    apt-get update -yq && \
    apt-get install -y graphviz && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
;fi

ARG INSTALL_COMPOSER=false
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_HOME /tmp
RUN if [ ${INSTALL_COMPOSER} = true ]; then \
    docker-php-ext-install zip \
    && apt-get update -yq \
    && apt-get install -y unzip wget \
    && EXPECTED_SIGNATURE="$(wget -q -O - https://composer.github.io/installer.sig)" \
    && php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" \
    && ACTUAL_SIGNATURE="$(php -r "echo hash_file('SHA384', 'composer-setup.php');")" \
    && test $EXPECTED_SIGNATURE = $ACTUAL_SIGNATURE  \
    && php composer-setup.php --install-dir=/usr/local/bin --filename=composer --quiet \
    && rm composer-setup.php \
    && composer config --global repo.packagist composer https://packagist.org && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
;fi

ARG INSTALL_TIDEWAYS_XHPROF=false

RUN if [ ${INSTALL_TIDEWAYS_XHPROF} = true ]; then \
    curl -o tideways-xhprof.tar.gz -s -L https://github.com/tideways/php-xhprof-extension/archive/v4.1.6.tar.gz && \
    tar xzvf tideways-xhprof.tar.gz && \
    cd php-xhprof-extension* && \
    phpize && \
    ./configure && \
    make && \
    make install && \
    echo "extension=tideways.so" >  /usr/local/etc/php/conf.d/tideways_xhprof.ini && \
    pecl install mongodb && docker-php-ext-enable mongodb && \
    curl -o /usr/local/src/xhgui.tar.gz -s -L https://github.com/perftools/xhgui/archive/0.8.1.tar.gz && \
    cd /usr/local/src/ && \
    tar xzvf /usr/local/src/xhgui.tar.gz && \
    cd xhgui-0.8.1 && \
    composer install && \
    echo "auto_prepend_file=/usr/local/src/xhgui-0.8.1/external/header.php" > /usr/local/etc/php/conf.d/xhgui.ini \
;fi

ARG INSTALL_LIBSODIUM=false

RUN if [ ${INSTALL_LIBSODIUM} = true ]; then \
    apt-get update -yq && \
    apt-get install -y libsodium-dev && \
    pecl install libsodium && \
    echo "extension=sodium.so" >  /usr/local/etc/php/conf.d/libsodium.ini && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
;fi

ARG INSTALL_GIT=false
RUN if [ ${INSTALL_GIT} = true ]; then \
    apt-get update -yq && \
    apt-get install -y git && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
;fi

ARG INSTALL_APCU=false
ARG APCU_VERSION=5.1.8

RUN if [ ${INSTALL_APCU} = true ]; then \
    pecl install apcu-${APCU_VERSION} && \
    echo "extension=apcu.so" >  /usr/local/etc/php/conf.d/apcu.ini && \
    echo 'apc.shm_size="64M"' | tee -a /usr/local/etc/php/conf.d/apcu.ini \
;fi

RUN usermod -u 1000 www-data

ARG INSTALL_DOCKER_API_ACCESS=false

RUN if [ ${INSTALL_DOCKER_API_ACCESS} = true ]; then \
    apt-get update -yq && \
    apt-get install -y sudo && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    echo 'www-data ALL=(ALL) NOPASSWD: /usr/bin/curl -s --unix-socket /var/run/docker.sock *' >> /etc/sudoers \
;fi

ARG INSTALL_IPROUTE2=false

RUN if [ ${INSTALL_IPROUTE2} = true ]; then \
    apt-get update -yq && \
    apt-get install -y iproute2 && \
    apt-get clean \
;fi

WORKDIR /app

CMD ["php-fpm"]

COPY . /app/
ARG APP_PORT=9000
EXPOSE ${APP_PORT}
RUN sed -i "s/9000/${APP_PORT}/" /usr/local/etc/php-fpm.d/zz-docker.conf