
FilesUrlsUpdaterTest:
  variables:
    LOCAL_COMPOSE: "docker-compose -f ./docker-compose.yml"
    REPO_NAME: $CI_PROJECT_NAME
    GIGADB_HOST: "172.17.0.1"
    GIGADB_PASSWORD: ""
    GIGADB_ENV: dev
    PROJECT_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fforks%2F$REPO_NAME/variables"
    MISC_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fcnhk-infra/variables"
    FOO: "bar"
  stage: test
  artifacts:
    paths:
      - gigadb/app/tools/files-url-updater/runtime/logs/app.log
      - gigadb/app/tools/files-url-updater/tests/_output
      - gigadb/app/tools/files-url-updater/drop_restore.log
      - gigadb/app/tools/files-url-updater/config/params.php
      - gigadb/app/tools/files-url-updater/composer.json
      - gigadb/app/tools/files-url-updater/composer.lock
      - gigadb/app/tools/files-url-updater/tests/acceptance.suite.yml
      - gigadb/app/tools/files-url-updater/tests/ci.acceptance.suite.yml
      - gigadb/app/tools/files-url-updater/.env
      - gigadb/app/tools/files-url-updater/.secrets
      - .env
      - .secrets
      - .ci_env
      - gigadb/app/tools/files-url-updater/.project_var
      - gigadb/app/tools/files-url-updater/.project_var_raw1
      - gigadb/app/tools/files-url-updater/.project_var_raw2
      - gigadb/app/tools/files-url-updater/.project_vars.json
      - protected/config/db.json
    when: always
    expire_in: 1 week
  script:
    - env | grep -iE "(GIGADB_ENV|PROJECT_VARIABLES_URL|MISC_VARIABLES_URL|GITLAB_PRIVATE_TOKEN|CI_PROJECT_URL)"| tee gigadb/app/tools/files-url-updater/.env
    - cd gigadb/app/tools/files-url-updater
    - $LOCAL_COMPOSE run --rm config
    - $LOCAL_COMPOSE run --rm updater composer install
    - $LOCAL_COMPOSE up -d pg9_3
    - $LOCAL_COMPOSE logs pg9_3
    - echo yes | $LOCAL_COMPOSE run --rm updater ./yii dataset-files/download-restore-backup --default
    - $LOCAL_COMPOSE run --rm updater ./vendor/bin/codecept build
    - sleep 5
    - $LOCAL_COMPOSE ps
    - $LOCAL_COMPOSE run --rm updater ./vendor/bin/codecept run tests/unit
    - $LOCAL_COMPOSE run --rm updater ./vendor/bin/codecept run tests/functional
  needs: ["container_scanning","phpcs-security-audit-sast"]
  environment:
    name: dev

FilesUrlsUpdaterBuildStaging:
  stage: staging build
  variables:
    LOCAL_COMPOSE: "docker-compose -f ./docker-compose.production.yml"
    REPO_NAME: $CI_PROJECT_NAME
    GIGADB_ENV: staging
    PROJECT_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fforks%2F$REPO_NAME/variables"
    MISC_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fcnhk-infra/variables"
  script:
    - env | grep -iE "(GIGADB_ENV|PROJECT_VARIABLES_URL|MISC_VARIABLES_URL|GITLAB_PRIVATE_TOKEN|CI_PROJECT_URL)"| tee gigadb/app/tools/files-url-updater/.env
    - cd gigadb/app/tools/files-url-updater
    - $LOCAL_COMPOSE run --rm config #run generate_config to create configuration file with variables from staging
    - docker-compose -f docker-compose.yml run --rm updater composer install # install composer dependencies
    - $LOCAL_COMPOSE build production_updater # build production container from the production docker file
    - $LOCAL_COMPOSE build production_s3backup # build the container for production s3 backup
    - $LOCAL_COMPOSE build production_pg9_3 # build the container for production version of legacy database server
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com # log in to Gitlab so we can push the container image there
    - docker tag ${CI_PROJECT_NAME}_production_updater:latest registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
    - docker tag ${CI_PROJECT_NAME}_production_s3backup:latest registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
    - docker tag ${CI_PROJECT_NAME}_production_pg9_3:latest registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
  dependencies: []
  environment:
    name: staging
  artifacts:
    paths:
      - gigadb/app/tools/files-url-updater/.env
      - gigadb/app/tools/files-url-updater/.secrets
      - gigadb/app/tools/files-url-updater/config
      - .env
      - .secrets
      - .ci_env
    when: always
    expire_in: 3 days
  needs: ["FilesUrlsUpdaterTest"]

FilesUrlsUpdaterDeployStaging:
  stage: staging deploy
  variables:
    GIGADB_ENV: staging
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    REMOTE_BASTION_DOCKER: "$remote_bastion_public_ip:2376"
  script:
    # Deployment to bastion server
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_bastion_tlsauth_ca' >  ~/.docker/ca.pem"
    - bash -c "echo '$docker_bastion_tlsauth_cert' > ~/.docker/cert.pem"
    - bash -c "echo '$docker_bastion_tlsauth_key' > ~/.docker/key.pem"
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER info
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
  environment:
    name: $GIGADB_ENV
  dependencies: []
  needs: [ "FilesUrlsUpdaterBuildStaging" ]


FilesUrlsUpdaterBuildLive:
  stage: live build
  extends: .tag_only
  variables:
    LOCAL_COMPOSE: "docker-compose -f ./docker-compose.production.yml"
    REPO_NAME: $CI_PROJECT_NAME
    GIGADB_ENV: live
    PROJECT_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fforks%2F$REPO_NAME/variables"
    MISC_VARIABLES_URL: "https://gitlab.com/api/v4/projects/gigascience%2Fcnhk-infra/variables"
  script:
    - env | grep -iE "(GIGADB_ENV|PROJECT_VARIABLES_URL|MISC_VARIABLES_URL|GITLAB_PRIVATE_TOKEN|CI_PROJECT_URL)"| tee gigadb/app/tools/files-url-updater/.env
    - cd gigadb/app/tools/files-url-updater
    - $LOCAL_COMPOSE run --rm config #run generate_config to create configuration file with variables from staging
    - docker-compose -f docker-compose.yml run --rm updater composer install # install composer dependencies
    - $LOCAL_COMPOSE build production_updater # build production container from the production docker file
    - $LOCAL_COMPOSE build production_s3backup # build the container for production s3 backup
    - $LOCAL_COMPOSE build production_pg9_3 # build the container for production version of legacy database server
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com # log in to Gitlab so we can push the container image there
    - docker tag ${CI_PROJECT_NAME}_production_updater:latest registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
    - docker tag ${CI_PROJECT_NAME}_production_s3backup:latest registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
    - docker tag ${CI_PROJECT_NAME}_production_pg9_3:latest registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
  dependencies: []
  environment:
    name: live
  when: manual
  artifacts:
    paths:
      - gigadb/app/tools/files-url-updater/.env
      - gigadb/app/tools/files-url-updater/.secrets
      - gigadb/app/tools/files-url-updater/config
      - .env
      - .secrets
      - .ci_env
    when: always
    expire_in: 3 days
  needs: ["FilesUrlsUpdaterDeployStaging"]

FilesUrlsUpdaterDeployLive:
  stage: live deploy
  extends: .tag_only
  variables:
    GIGADB_ENV: live
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    REMOTE_BASTION_DOCKER: "$remote_bastion_public_ip:2376"
  script:
    # Deployment to bastion server
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_bastion_tlsauth_ca' >  ~/.docker/ca.pem"
    - bash -c "echo '$docker_bastion_tlsauth_cert' > ~/.docker/cert.pem"
    - bash -c "echo '$docker_bastion_tlsauth_key' > ~/.docker/key.pem"
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER info
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_updater:$GIGADB_ENV
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_s3backup:$GIGADB_ENV
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_pg9_3:$GIGADB_ENV
  environment:
    name: $GIGADB_ENV
  dependencies: []
  needs: [ "FilesUrlsUpdaterBuildLive" ]
