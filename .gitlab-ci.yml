stages:
  - conformance and security
  - build for test
  - test
  - staging build
  - staging deploy
  - acceptance
  - live build
  - live deploy
  - operations

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  # See https://github.com/docker-library/docker/pull/166
  DOCKER_TLS_CERTDIR: ""
  # the configuration script needs to know that we are not in DEV environment anymore
  # so it doesn't try to access
  GIGADB_ENV: CI
  # .env is only for dev, elsewhere we just list the variables here
  APPLICATION: "$CI_PROJECT_DIR"
  YII_PATH: "/var/www/vendor/yiisoft/yii"
  YII2_PATH: "/var/www/vendor/yiisoft/yii2"
  DATA_SAVE_PATH: "/builds/$CI_PROJECT_PATH/containers-data"
  DOCKER_VERSION: "20.10.12"
  NGINX_VERSION: "1.21.3"
  PHP_VERSION: "7.3.33"
  APCU_VERSION: "5.1.21"
  NODE_VERSION: "17.6.0"
  YII_VERSION: "1.1.25"
  YII2_VERSION: "2.0.44"
  POSTGRES_VERSION: "11.13"
  HOME_URL: "gigadb.gigasciencejournal.com"
  FILES_PUBLIC_URL: "http://gigadb.gigasciencejournal.com:9170"
  PUBLIC_HTTP_PORT: "9170"
  PUBLIC_HTTPS_PORT: "8043"
  COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml"
  COMPOSE_PROJECT_NAME: ${CI_PROJECT_NAME}
  COVERALLS_RUN_LOCALLY: "1"
  MAIN_BRANCH: "develop"
  GITLAB_PRIVATE_TOKEN: $CI_BUILD_TOKEN
  GITLAB_UPSTREAM_PROJECT_ID: "7041674"
  CSV_DIR: "production_like"
  YII_ENV_DEV: "true"
  SERVER_HOSTNAME: "gigadb.gigasciencejournal.com"

image: docker:$DOCKER_VERSION

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - local: "ops/pipelines/gigadb-build-jobs.yml"
  - local: "ops/pipelines/gigadb-test-jobs.yml"
  - local: "ops/pipelines/gigadb-conformance-security-jobs.yml"
  - local: "ops/pipelines/gigadb-deploy-jobs.yml"
  - local: "ops/pipelines/gigadb-operations-jobs.yml"
#  - local: "gigadb/app/tools/files-url-updater/gitlab-config.yml"

services:
  - docker:${DOCKER_VERSION}-dind

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
      - vendor/
      - bin/
      - composer.lock
      - fuw/app/vendor/
      - fuw/app/bin/
      - fuw/app/composer.lock
      - gigadb/app/worker/file-worker/vendor
      - gigadb/app/worker/file-worker/composer.lock
      - gigadb/app/client/web/node_modules

before_script:
  - env
  - '[[ $CI_JOB_NAME != *sast* ]] && [[ $CI_JOB_NAME != container_scanning* ]] && env | grep "^CI_" > $APPLICATION/.ci_env'
  - '[[ $CI_JOB_NAME != *sast* ]] && [[ $CI_JOB_NAME != container_scanning* ]] && env | grep -v "SAST" | grep -v "^DOCKER" | grep -v "^CI" | grep -v "^LOCAL_COMPOSE" | grep -v "^GITLAB" | grep -v "==" | grep -E "^[a-zA-Z0-9_]+=.+" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tls)" > $APPLICATION/.env'
  - '[[ $CI_JOB_NAME != *sast* ]] && [[ $CI_JOB_NAME != container_scanning* ]] && env | grep -v "SAST" | grep -v "^DOCKER" | grep -v "^CI" | grep -v "^LOCAL_COMPOSE" | grep -v "^GITLAB" | grep -v "==" | grep -E "^[a-zA-Z0-9_]+=.+" | grep -v "ANALYTICS_PRIVATE_KEY" | grep -viE "tls" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" > $APPLICATION/.secrets'
  - '[[ $CI_JOB_NAME != *sast* ]] && [[ $CI_JOB_NAME != container_scanning* ]] && time apk add --no-cache py-pip bash curl jq'
  # Pin docker-compose version to stop installation error
  - '[[ $CI_JOB_NAME != *sast* ]] && [[ $CI_JOB_NAME != container_scanning* ]] && time pip install docker-compose~=1.23.0'

sd_gigadb:
  variables:
    GIGADB_ENV: "staging"
  extends: .deploy
  stage: staging deploy
  tags:
    - $GITLAB_USER_LOGIN
  environment:
    name: "staging"
    url: $REMOTE_HOME_URL
    on_stop: sd_teardown

ld_gigadb:
  variables:
    GIGADB_ENV: "live"
  extends: .deploy
  stage: live deploy
  tags:
    - $GITLAB_USER_LOGIN
  environment:
    name: "live"
    deployment_tier: production
    url: $REMOTE_HOME_URL
