<?php
/**
 * Unit tests for CachedDatasetAccessions to retrieve dataset accessions from a cache
 *
 * @see DatasetAccessionsInterface.php
 * @author Rija Menage <rija+git@cinecinetique.com>
 * @license GPL-3.0
 */
class CachedDatasetAccessionsTest extends CDbTestCase
{
	protected $fixtures=array(
        'datasets'=>'Dataset',
        'links'=>'Link',
        'prefixes'=>'Prefix',
    );

	public function setUp()
	{
		parent::setUp();
	}

	/**
	 * test that this DAO class return a Dataset's Primary links from cache
	 *
	 */
	public function testCachedReturnsPrimaryLinksCacheHit()
	{

		$doi = 100243;
		//we first need to create a mock object for the cache
		$cache = $this->getMockBuilder(CApcCache::class)
                         ->setMethods(['get'])
                         ->getMock();
        //then we set our expectation for a Cache Hit
        $cache->expects($this->once())
                 ->method('get')
                 ->with($this->equalTo("dataset_${doi}_accessionsPrimaryLinks"))
                 ->willReturn([$this->links(0), $this->links(1)]);

		$dao_under_test = new CachedDatasetAccessions(
								$cache,
								new StoredDatasetAccessions(
										$doi,
										$this->getFixtureManager()->getDbConnection()
								)
		);
		$primaryLinks = $dao_under_test->getPrimaryLinks();
		$nb_primary_links = count($primaryLinks);
		$this->assertEquals(2, $nb_primary_links);
		$counter = 0;
		while( $counter < $nb_primary_links ) {
			$this->assertEquals($this->links($counter)->is_primary, $primaryLinks[$counter]->is_primary );
			$this->assertEquals($this->links($counter)->link, $primaryLinks[$counter]->link );
			$counter++;
		}
	}

	/**
	 * test that this DAO class return a Dataset's Primary links from cache but cache expired or was invalidated
	 * In this case the information should be fetched from storage
	 */
	public function testCachedReturnsPrimaryLinksCacheMiss()
	{

		$doi = 100243;
		//we first need to create a mock object for the cache
		$cache = $this->getMockBuilder(CApcCache::class)
                         ->setMethods(['get','set'])
                         ->getMock();
        //then we set our expectation for a Cache Miss
        $cache->expects($this->once())
                 ->method('get')
                 ->with($this->equalTo("dataset_${doi}_accessionsPrimaryLinks"))
                 ->willReturn(false);
		//when there is a cache miss, we also expect the value to be set into the cache for 24 hours
        $cache->expects($this->once())
                 ->method('set')
                 ->with(
                 	$this->equalTo("dataset_${doi}_accessionsPrimaryLinks"),
                 	[$this->links(0), $this->links(1)],
                 	60*60*24
                );

		$dao_under_test = new CachedDatasetAccessions(
								$cache,
								new StoredDatasetAccessions(
										$doi,
										$this->getFixtureManager()->getDbConnection()
								)
		);
		$primaryLinks = $dao_under_test->getPrimaryLinks();
		$nb_primary_links = count($primaryLinks);
		$this->assertEquals(2, $nb_primary_links);
		$counter = 0;
		while( $counter < $nb_primary_links ) {
			$this->assertEquals($this->links($counter)->is_primary, $primaryLinks[$counter]->is_primary );
			$this->assertEquals($this->links($counter)->link, $primaryLinks[$counter]->link );
			$counter++;
		}
	}

	/**
	 * test that this DAO class return a Dataset's Secondary links from cache
	 *
	 */
	public function testCachedReturnsSecondaryLinksCacheHit()
	{

		$doi = 100243;
		//we first need to create a mock object for the cache
		$cache = $this->getMockBuilder(CApcCache::class)
                         ->setMethods(['get'])
                         ->getMock();
        //then we set our expectation for a Cache Hit
        $cache->expects($this->once())
                 ->method('get')
                 ->with($this->equalTo("dataset_${doi}_accessionsSecondaryLinks"))
                 ->willReturn([$this->links(2), $this->links(3), $this->links(4)]);

		$dao_under_test = new CachedDatasetAccessions(
								$cache,
								new StoredDatasetAccessions(
										$doi,
										$this->getFixtureManager()->getDbConnection()
								)
		);
		$secondaryLinks = $dao_under_test->getSecondaryLinks();
		$nb_secondaryLinks = count($secondaryLinks);
		$this->assertEquals(3, $nb_secondaryLinks);
		$counter = 0;
		while( $counter < $nb_secondaryLinks ) {
			$this->assertEquals($this->links($counter+2)->is_primary, $secondaryLinks[$counter]->is_primary );
			$this->assertEquals($this->links($counter+2)->link, $secondaryLinks[$counter]->link );
			$counter++;
		}
	}

	/**
	 * test that this DAO class return a Dataset's Secondary links from cache but cache expired or was invalidated
	 * In this case the information should be fetched from storage
	 *
	 */
	public function testCachedReturnsSecondaryLinksCacheMiss()
	{

		$doi = 100243;
		//we first need to create a mock object for the cache
		$cache = $this->getMockBuilder(CApcCache::class)
                         ->setMethods(['get', 'set'])
                         ->getMock();
        //then we set our expectation for a Cache Miss
        $cache->expects($this->once())
                 ->method('get')
                 ->with($this->equalTo("dataset_${doi}_accessionsSecondaryLinks"))
                 ->willReturn(false);

        //when there is a cache miss, we also expect the value to be set into the cache for 24 hours
        $cache->expects($this->once())
                 ->method('set')
                 ->with(
                 	$this->equalTo("dataset_${doi}_accessionsSecondaryLinks"),
                 	[$this->links(2), $this->links(3), $this->links(4)],
                 	60*60*24
                );
		$dao_under_test = new CachedDatasetAccessions(
								$cache,
								new StoredDatasetAccessions(
										$doi,
										$this->getFixtureManager()->getDbConnection()
								)
		);
		$secondaryLinks = $dao_under_test->getSecondaryLinks();
		$nb_secondaryLinks = count($secondaryLinks);
		$this->assertEquals(3, $nb_secondaryLinks);
		$counter = 0;
		while( $counter < $nb_secondaryLinks ) {
			$this->assertEquals($this->links($counter+2)->is_primary, $secondaryLinks[$counter]->is_primary );
			$this->assertEquals($this->links($counter+2)->link, $secondaryLinks[$counter]->link );
			$counter++;
		}
	}

	/**
	 * test that this DAO class return all prefixes from cache
	 *
	 */
	public function testCachedReturnsPrefixesCacheHit()
	{
		$doi = 100243;
		//we first need to create a mock object for the cache
		$cache = $this->getMockBuilder(CApcCache::class)
                         ->setMethods(['get'])
                         ->getMock();
        //then we set our expectation for a Cache Hit
        $cache->expects($this->once())
                 ->method('get')
                 ->with($this->equalTo("dataset_${doi}_prefixes"))
                 ->willReturn([$this->prefixes(0), $this->prefixes(1)]);

		$dao_under_test = new CachedDatasetAccessions(
						$cache,
						new StoredDatasetAccessions(
								$doi,
								$this->getFixtureManager()->getDbConnection()
						)
		);

		$prefixes = $dao_under_test->getPrefixes();
		$nb_prefixes = count($prefixes);
		$this->assertEquals(2, $nb_prefixes);
		$counter = 0;
		while( $counter < $nb_prefixes ) {
			$this->assertEquals($this->prefixes($counter)->prefix, $prefixes[$counter]['prefix'] );
			$this->assertEquals($this->prefixes($counter)->url, $prefixes[$counter]['url'] );
			$this->assertEquals($this->prefixes($counter)->source, $prefixes[$counter]['source'] );
			$counter++;
		}
	}

	/**
	 * test that this DAO class return all prefixes from cache but with cache miss
	 *
	 */
	public function testCachedReturnsPrefixesCacheMiss()
	{
		$doi = 100243;
		//we first need to create a mock object for the cache
		$cache = $this->getMockBuilder(CApcCache::class)
                         ->setMethods(['get','set'])
                         ->getMock();
        //then we set our expectation for a Cache Miss
        $cache->expects($this->once())
                 ->method('get')
                 ->with($this->equalTo("dataset_${doi}_prefixes"))
                 ->willReturn(false);

		 //when there is a cache miss, we also expect the value to be set into the cache for 24 hours
        $cache->expects($this->once())
                 ->method('set')
                 ->with(
                 	$this->equalTo("dataset_${doi}_prefixes"),
                 	[
                 		$this->prefixes(0)->getAttributes(["id","prefix","url","source"]),
                 		$this->prefixes(1)->getAttributes(["id","prefix","url","source"])
                 	],
                 	60*60*24
                );

		$dao_under_test = new CachedDatasetAccessions(
						$cache,
						new StoredDatasetAccessions(
								$doi,
								$this->getFixtureManager()->getDbConnection()
						)
		);

		$prefixes = $dao_under_test->getPrefixes();
		$nb_prefixes = count($prefixes);
		$this->assertEquals(2, $nb_prefixes);
		$counter = 0;
		while( $counter < $nb_prefixes ) {
			$this->assertEquals($this->prefixes($counter)->prefix, $prefixes[$counter]['prefix'] );
			$this->assertEquals($this->prefixes($counter)->url, $prefixes[$counter]['url'] );
			$this->assertEquals($this->prefixes($counter)->source, $prefixes[$counter]['source'] );
			$counter++;
		}
	}


}
?>
