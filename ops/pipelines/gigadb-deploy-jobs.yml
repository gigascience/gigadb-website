.deploy:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    REMOTE_BASTION_DOCKER: "$remote_bastion_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
    PHP_VERSION: "7.4.33"
  stage: deployment
  allow_failure: false
  script:
    # Load Base image
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker load -i php-$PHP_VERSION-fpm-bullseye.tar
    - docker load -i php-$PHP_VERSION-cli-bullseye.tar
    - docker load -i alpine-3_14.tar
    - docker load -i nginx-$NGINX_VERSION-alpine.tar
    - docker load -i node-$NODE_VERSION-bullseye-slim.tar
    # login to gitlab container registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    # appending production variables at the end of the .env and .secrets
    - env > full_env.txt
    - env | grep -v "SAST" | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tls)" | tee -a  $APPLICATION/.env
    - env | grep -v "SAST" | grep -iE "^TIDEWAYS_APIKEY" >> $APPLICATION/.env
    - env | grep -v "SAST" | grep -v "DOCKER_" | grep -v "GITLAB_" | grep -v "CI_" | grep -iE "(password|email|tester|secret|user|app_id|client_id|token)" | grep -viE "tlsauth" | grep -v "client_" | grep -v "token_uri" | tee -a $APPLICATION/.secrets
    - env | grep -v "SAST" | grep "^CI_API_V4_URL" | tee -a  $APPLICATION/.env
    - env | grep -v "SAST" | grep "^CI_PROJECT_PATH" | tee -a  $APPLICATION/.env
    - env | grep -v "SAST" | grep "^GITLAB_PRIVATE_TOKEN" | tee -a  $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "echo '$docker_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "echo '$docker_tlsauth_key' > ~/.docker/key.pem || true"
    # Pull production container from our private registry
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER info
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_web:$GIGADB_ENV
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_app:$GIGADB_ENV
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_config:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:$GIGADB_ENV
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:$GIGADB_ENV
    # shutdown currently running container but NOT its volumes
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml down
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER stop socat || true
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER rm socat || true
    # verify config renders correctly after variables interpolation
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml config
    # Redeploy all containers but the web container
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml up -d application #fuw-admin fuw-public
    # deploy the web container once the application servers are up
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml up -d web
    # Run migration script to generate reference data feed for file formats and file types
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml run --rm application ./protected/yiic generatefiletypes
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml run --rm application ./protected/yiic generatefileformats
    # Spin up portainer container
    - ./ops/scripts/start_portainer.sh
    # Generate the web certificate for TLS termination on web container.
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml run --rm config bash -c "cp /le.staging.ini /etc/letsencrypt/cli.ini && chmod 777 /var/www/assets"
    - ./ops/scripts/setup_cert.sh
    # Debug steps
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml ps
    #- docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml top
    - sleep 5
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml logs application
    # symlink the https configuration for web container and reload nginx (cannot be done earlier as nginx will crash if it cannot see valid web certificates)
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T web /usr/local/bin/enable_sites gigadb.$GIGADB_ENV.https
    # FUW specific steps
#    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T console /app/yii migrate --interactive=0
#    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml up -d fuw-worker gigadb-worker
#    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T web /usr/local/bin/enable_sites fuw-backend.$GIGADB_ENV.http fuw-frontend.$GIGADB_ENV.http
#    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T console ./yii identity/add-identity --username localadmin --email local-gigadb-admin@rijam.ml1.net --role admin
    # start the port 2375 for docker
#    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER run --name socat -d -v /var/run/docker.sock:/var/run/docker.sock -p $remote_private_ip:2375:2375 bobrik/socat TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock
#  dependencies:
#    - build
    # Deployment to bastion server
    - bash -c "echo '$docker_bastion_tlsauth_ca' >  ~/.docker/ca.pem"
    - bash -c "echo '$docker_bastion_tlsauth_cert' > ~/.docker/cert.pem"
    - bash -c "echo '$docker_bastion_tlsauth_key' > ~/.docker/key.pem"
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER info
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker --tlsverify -H=$REMOTE_BASTION_DOCKER pull registry.gitlab.com/$CI_PROJECT_PATH/production_app:$GIGADB_ENV
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  artifacts:
    untracked: true
    exclude:
      - "*.tar"
    when: always
    expire_in: 1 week
