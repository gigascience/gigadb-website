base_images:
  stage: .pre
  tags:
    - $GITLAB_USER_LOGIN
  script:
    # login and pull from docker hub the base image for php-fpm so it's done only once
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker pull php:$PHP_VERSION-fpm-buster
    - docker pull php:8.2.3-cli-bullseye
    - docker save -o php-$PHP_VERSION-fpm-buster.tar php:$PHP_VERSION-fpm-buster
    - docker pull php:$PHP_VERSION-cli-buster
    - docker save -o php-$PHP_VERSION-cli-buster.tar php:$PHP_VERSION-cli-buster
    - docker save -o php-8.2.3-cli-bullseye.tar php:8.2.3-cli-bullseye
    - docker pull alpine:3.14.2
    - docker save -o alpine-3_14.tar alpine:3.14.2
    - docker pull nginx:$NGINX_VERSION-alpine
    - docker save -o nginx-$NGINX_VERSION-alpine.tar nginx:$NGINX_VERSION-alpine
    - docker pull node:$NODE_VERSION-buster-slim
    - docker save -o node-$NODE_VERSION-buster-slim.tar node:$NODE_VERSION-buster-slim
  artifacts:
    paths:
      - php-$PHP_VERSION-fpm-buster.tar
      - php-$PHP_VERSION-cli-buster.tar
      - php-8.2.3-cli-bullseye.tar
      - alpine-3_14.tar
      - nginx-$NGINX_VERSION-alpine.tar
      - node-$NODE_VERSION-buster-slim.tar
  cache:
    key:
      files:
        - composer.lock
        - ops/scripts/package-lock.json
    paths:
      - gigadb/app/client/web/package-lock.json
      - fuw/app/composer.lock
      - gigadb/app/worker/file-worker/composer.lock
      - vendor/
      - fuw/app/vendor/
      - gigadb/app/worker/file-worker/vendor
      - ops/scripts/node_modules
      - gigadb/app/client/web/node_modules

b_gigadb:
  variables:
    PORTAINER_BCRYPT: ""
    REMOTE_DOCKER_HOSTNAME: ""
  stage: build for test
  tags:
    - $GITLAB_USER_LOGIN
  script:
    # Load Base image
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker load -i php-$PHP_VERSION-fpm-buster.tar
    - docker load -i php-$PHP_VERSION-cli-buster.tar
    - docker load -i alpine-3_14.tar
    - docker load -i nginx-$NGINX_VERSION-alpine.tar
    - docker load -i node-$NODE_VERSION-buster-slim.tar
    # login to gitlab container registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    # build for test
    - echo "Building app"
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/console:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/web:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/js:latest || true
    - time docker-compose build application
    - time docker-compose build test
    - time docker-compose build fuw-admin
    - time docker-compose build fuw-worker
    - time docker-compose build gigadb-worker
    - time docker-compose build fuw-public
    - time docker-compose build console
    - time docker-compose build ftpd
    - time docker-compose build watcher
    - time docker-compose build tusd
    - time docker-compose build beanstalkd
    - time docker-compose build web
    - time docker-compose build js
    - docker tag ${CI_PROJECT_NAME}_application:latest registry.gitlab.com/$CI_PROJECT_PATH/application:latest
    - docker tag ${CI_PROJECT_NAME}_test:latest registry.gitlab.com/$CI_PROJECT_PATH/test:latest
    - docker tag ${CI_PROJECT_NAME}_fuw-admin:latest registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest
    - docker tag ${CI_PROJECT_NAME}_fuw-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest
    - docker tag ${CI_PROJECT_NAME}_gigadb-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest
    - docker tag ${CI_PROJECT_NAME}_fuw-public:latest registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest
    - docker tag ${CI_PROJECT_NAME}_console:latest registry.gitlab.com/$CI_PROJECT_PATH/console:latest
    - docker tag ${CI_PROJECT_NAME}_ftpd:latest registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest
    - docker tag ${CI_PROJECT_NAME}_watcher:latest registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest
    - docker tag ${CI_PROJECT_NAME}_tusd:latest registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest
    - docker tag ${CI_PROJECT_NAME}_beanstalkd:latest registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest
    - docker tag ${CI_PROJECT_NAME}_web:latest registry.gitlab.com/$CI_PROJECT_PATH/web:latest
    - docker tag ${CI_PROJECT_NAME}_js:latest registry.gitlab.com/$CI_PROJECT_PATH/js:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/application:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/test:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/console:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/web:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/js:latest
    - time docker-compose run --rm config
    - time docker-compose run --rm fuw-config
    - time docker-compose run --rm test composer install
    - time docker-compose run --rm console bash -c "cd /app && composer update"
    - time docker-compose run --rm console bash -c 'cd /gigadb-apps/worker/file-worker/ && composer update'
    - time docker-compose run --rm js npm install
  artifacts:
    untracked: true
    when: always
    expire_in: 1 week


.pb_gigadb:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
    CSV_DIR: "prod_like"
    PORTAINER_BCRYPT: ""
    REMOTE_DOCKER_HOSTNAME: ""
    PHP_VERSION: "7.4.33"

  stage: production build
  allow_failure: false
  script:
    # Load Base image
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - time docker load -i php-$PHP_VERSION-fpm-buster.tar
    - time docker load -i php-$PHP_VERSION-cli-buster.tar
    - docker load -i alpine-3_14.tar
    - docker load -i nginx-$NGINX_VERSION-alpine.tar
    - time docker load -i node-$NODE_VERSION-buster-slim.tar
    # login to gitlab container registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    # appending remote variables at the end of the .env and .secrets
    - env > full_env.txt
    - env | grep -v "SAST" | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -v "SAST" | grep -iE "^TIDEWAYS_APIKEY" >> $APPLICATION/.env
    - env | grep -v "SAST" | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    - env | grep -v "SAST" | grep -iE "gitlab_private_token">> $APPLICATION/.secrets
    - env | grep -v "SAST" | grep -iE "CI_PROJECT_URL">> $APPLICATION/.secrets
    - env | grep -v "SAST" | grep -iE "^(gigadb_|fuw_).+=.+$" | tee -a $APPLICATION/.secrets
    # pulling the CI build of the application from registry and configure it for staging for the purpose of building production containers
    - time docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest || true
    # Generate configuration files and vendors libraries before baking an immutable image
    - git describe --always | tee VERSION
    - time docker-compose run --rm config
    - time docker-compose run --rm application composer install -a --no-dev
    - docker-compose run --rm less
#    - docker-compose run --rm fuw-config
#    - docker-compose run --rm console bash -c "cd /app && composer install -a --no-dev"
#    - docker-compose run --rm console bash -c 'cd /gigadb-apps/worker/file-worker/ && composer install -a --no-dev'
    # Share the model layer across apps
#    - cp gigadb/app/worker/file-worker/models/UpdateGigaDBJob.php fuw/app/
    # pulling production build of images from registry to use as cache
    - time docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_app:$GIGADB_ENV || true
    - time docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_config:$GIGADB_ENV || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:latest || true
#    - time docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:latest || true
#    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:latest || true
    - time docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_web:$GIGADB_ENV || true
    # build the javascript app, so that the Vue.js app can be baked in production_app
#    - docker-compose run --rm js
    # build Nginx web container, making sure static assets are baked in
#    - cp -R fuw/app/backend ops/configuration/fuw-conf/
    - time docker-compose build production_web
    # build and push production containers for PHP-FPM with application code and vendor code baked in and publish to registry
    - time docker-compose build production_app
    - time docker-compose build production_config
    - time docker tag ${CI_PROJECT_NAME}_production_web:latest registry.gitlab.com/$CI_PROJECT_PATH/production_web:$GIGADB_ENV
    - time docker tag ${CI_PROJECT_NAME}_production_app:latest registry.gitlab.com/$CI_PROJECT_PATH/production_app:$GIGADB_ENV
    - time docker tag ${CI_PROJECT_NAME}_production_config:latest registry.gitlab.com/$CI_PROJECT_PATH/production_config:$GIGADB_ENV
    - time docker push registry.gitlab.com/$CI_PROJECT_PATH/production_web:$GIGADB_ENV
    - time docker push registry.gitlab.com/$CI_PROJECT_PATH/production_app:$GIGADB_ENV
    - time docker push registry.gitlab.com/$CI_PROJECT_PATH/production_config:$GIGADB_ENV
    # build and push sidecar apps (ftpd, watcher, tusd, beanstalkd) for FUW
#    - time docker-compose build production_ftpd
#    - docker-compose build production_watcher
#    - docker-compose build production_tusd
#    - docker-compose build production_beanstalkd
#    - time docker tag ${CI_PROJECT_NAME}_production_ftpd:latest registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_watcher:latest registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_tusd:latest registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_beanstalkd:latest registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:$GIGADB_ENV
#    - time docker push registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:$GIGADB_ENV
    # build and push production container images for File Upload Wizard apps
#    - docker-compose build production_fuw-console
#    - docker-compose build production_fuw-admin
#    - docker-compose build production_fuw-public
#    - docker-compose build production_fuw-worker
#    - docker-compose build production_gigadb-worker
#    - docker tag ${CI_PROJECT_NAME}_production_fuw-console:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_fuw-admin:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_fuw-public:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_fuw-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:$GIGADB_ENV
#    - docker tag ${CI_PROJECT_NAME}_production_gigadb-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:$GIGADB_ENV
#    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:$GIGADB_ENV
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  artifacts:
    untracked: true
    paths:
      - php-$PHP_VERSION-fpm-buster.tar
      - php-$PHP_VERSION-cli-buster.tar
      - alpine-3_14.tar
      - nginx-$NGINX_VERSION-alpine.tar
      - node-$NODE_VERSION-buster-slim.tar
    when: on_failure
    expire_in: 1 week

build_staging:
  variables:
    GIGADB_ENV: "staging"
    YII_DEBUG: "true"
  extends: .pb_gigadb
  stage: staging build
  tags:
    - $GITLAB_USER_LOGIN
  needs: ["base_images","legacy_tests","unit_func_tests","integration_tests"]
  environment:
    name: "staging"
    url: $REMOTE_HOME_URL

build_live:
  variables:
    GIGADB_ENV: "live"
  extends: 
    - .tag_only
    - .pb_gigadb
  stage: live build
  tags:
    - $GITLAB_USER_LOGIN
  needs: ["base_images","a_gigadb"]
  when: manual
  environment:
    name: "live"
    deployment_tier: production
    url: $REMOTE_HOME_URL
