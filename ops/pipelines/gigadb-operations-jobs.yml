.remote_compose:
  cache: []
  dependencies: []
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operations
  script: &configure-docker-compose
    # appending staging variables at the end of the .env and .secrets
    - env | grep -v "SAST" | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -v "SAST" | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "echo '$docker_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "echo '$docker_tlsauth_key' > ~/.docker/key.pem || true"

.sd_top:
  variables:
    GIGADB_ENV: staging
  extends: .remote_compose
  stage: staging deploy
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml top
  environment:
    name: staging
    action: prepare
  when: manual

ld_top:
  variables:
    GIGADB_ENV: live
  extends: .remote_compose
  stage: live deploy
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml top
  environment:
    name: live
    action: prepare
  when: manual

.sd_reset_migration:
  variables:
    GIGADB_ENV: staging
  extends: .remote_compose
  stage: staging deploy
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml run --rm  application ./protected/yiic migrate mark 000000_000000 --interactive=0
  environment:
    name: staging
    action: prepare
  when: manual

ld_reset_migration:
  variables:
    GIGADB_ENV: live
  extends: .remote_compose
  stage: live deploy
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml run --rm  application ./protected/yiic migrate mark 000000_000000 --interactive=0
  environment:
    name: live
    action: prepare
  when: manual


.teardown:
  extends: .remote_compose
  stage: operations
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml down -v
  when: manual
  artifacts:
    untracked: true
    when: always
    expire_in: 1 week

.application_stop:
  extends: .remote_compose
  stage: operations
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml stop application
  when: manual
  artifacts:
    untracked: true
    when: on_failure
    expire_in: 1 week

.application_start:
  extends: .remote_compose
  stage: operations
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml start application
  when: manual
  artifacts:
    untracked: true
    when: on_failure
    expire_in: 1 week

.refresh_search:
  extends: .remote_compose
  stage: operations
  script:
    - *configure-docker-compose
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml run --rm application ./protected/yiic custommigrations refreshmaterializedviews
  when: manual
  artifacts:
    untracked: true
    when: on_failure
    expire_in: 1 week

.sd_teardown:
  variables:
    GIGADB_ENV: "staging"
  extends: .teardown
  stage: staging deploy
  environment:
    name: staging
    action: stop

.sd_stop_app:
  variables:
    GIGADB_ENV: "staging"
  extends: .application_stop
  stage: staging deploy
  environment:
    name: staging

.sd_start_app:
  variables:
    GIGADB_ENV: "staging"
  extends: .application_start
  stage: staging deploy
  environment:
    name: staging

.sd_refresh_search:
  variables:
    GIGADB_ENV: "staging"
  extends: .refresh_search
  stage: staging deploy
  environment:
    name: staging

ld_refresh_search:
  variables:
    GIGADB_ENV: "live"
  extends: .refresh_search
  stage: live deploy
  environment:
    name: live

ld_stop_app:
  variables:
    GIGADB_ENV: "live"
  extends: .application_stop
  stage: live deploy
  environment:
    name: live

ld_start_app:
  variables:
    GIGADB_ENV: "live"
  extends: .application_start
  stage: live deploy
  environment:
    name: live

ld_teardown:
  variables:
    GIGADB_ENV: "live"
  extends: .teardown
  stage: live deploy
  environment:
    name: live
    action: stop

.socat: #hidden for now as specific to FUW
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operations
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "echo '$docker_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "echo '$docker_tlsauth_key' > ~/.docker/key.pem || true"
    # start the port 2375 for docker after ensured it's stopped (SIGKILL (137)) and removed
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER rm -f socat || true
    - docker --tlsverify -H=$REMOTE_WEBAPP_DOCKER run --name socat -d -v /var/run/docker.sock:/var/run/docker.sock -p $remote_private_ip:2375:2375 bobrik/socat TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  when: manual

.smoke_tests: #hidden for now as specific to FUW
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operations
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "echo '$docker_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "echo '$docker_tlsauth_key' > ~/.docker/key.pem || true"
    # FUW smoke tests
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T console ./yii smoke-test/check-docker-php
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T console ./yii smoke-test/check-tusd-endpoint
  when: manual

ld_smoke_tests:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_DOCKER_HOST: "$remote_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: live smoke test
  script:
    # appending live variables at the end of the .env and .secrets
    - env | grep -iE "^(live_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(live_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "echo '$docker_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "echo '$docker_tlsauth_key' > ~/.docker/key.pem || true"
    # smoke test for live deployment
    - env
    - cd $APPLICATION
    - ./up.sh
    - ./tests/smoke_runner
  environment:
    name: live
  when: manual

.check_assets:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_WEBAPP_DOCKER: "$remote_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operations
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "echo '$docker_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "echo '$docker_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "echo '$docker_tlsauth_key' > ~/.docker/key.pem || true"
    # list content of assets directory
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T web ls -alrt /var/www/assets
    - docker-compose --tlsverify -H=$REMOTE_WEBAPP_DOCKER -f ops/deployment/docker-compose.production-envs.yml exec -T application ls -alrt /var/www/assets
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  when: manual
  artifacts:
    untracked: true
    when: always
    expire_in: 1 week