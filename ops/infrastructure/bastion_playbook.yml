---
# This playbook is to configure the EC2 instance that acts as a public bastion to access EC2 instances
# on private networks (web and files EC2 instances,as well as RDS)
# Do not use this playbook to install endusers CLI app
# This playbook needs to run after executing `ansible_init.sh` but before triggering the Gitlab pipeline for
# a given environment


- name: Fix Centos EOL issues
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - fix-centos-eol-issues

  roles:
    - role: ../../roles/centos-eol-fix

- name: Setup Fail2ban
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - setup-fail2ban

  tasks:
    - debug:
        msg: "remote private ip : {{ ec2_bastion_private_ip }}"

  roles:
    - role: ../../roles/fail2ban
    - role: ../../roles/jail-ssh

- name: Setup Docker CE
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - setup-docker-ce
  vars:
    target_host: _bastion

  roles:
    - role: ../../roles/docker-install
    - role: role-secure-docker-daemon
      dds_host: "{{ ec2_bastion_public_ip }}"
      dds_server_cert_path: /etc/docker
      dds_restart_docker: no
      dds_client_cert_path: /home/centos/.docker
    - role: ../../roles/docker-postinstall
    - role: ../../roles/docker-daemon-enable-start

- name: Install node exporter
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - node-exporter
  roles:
    - prometheus.prometheus.node_exporter

- name: Setup postgresql client
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - postgresql-client

  tasks:
    - name: Disable postgresql module in AppStream
      command: dnf -qy module disable postgresql
      become: yes

    - rpm_key:
        state: present
        key: https://download.postgresql.org/pub/repos/yum/keys/PGDG-RPM-GPG-KEY-RHEL

    - name: Install PostgreSQL repo
      become: yes
      dnf:
        name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
        state: present

    - name: Install PostgreSQL 14 client packages
      become: yes
      dnf:
        name: postgresql14
        state: present

    - name: Test pg_isready can connect to RDS instance
      ansible.builtin.command: "/usr/pgsql-14/bin/pg_isready -h {{ pg_host }}"
      register: pg_isready
    - debug: msg="{{ pg_isready.stdout }}"

    - name: Copy specified backup file from files-url-updater tool to bastion server
      ansible.builtin.copy:
        src: '{{ backup_file }}'
        dest: "/home/centos/database_bootstrap.backup"
        owner: centos
        group:
      when: backup_file

- name: Create AWS credentials file
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - create-metadata-bucket-credentials-file

  tasks:
  - name: Create a /etc/aws directory for the metadata
    ansible.builtin.file:
      path: "/etc/aws"
      state: directory
      mode: '0755'
      owner: centos
      group: centos

  - name: Create AWS credential file for access to AWS S3 metadata bucket
    template:
      src: ../../../../ops/configuration/aws-conf/credentials.j2
      dest: "/etc/aws/credentials"
      owner: centos
      group: centos
      mode: 0644

- name: Set up and configuration of rclone on bastion server
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - rclone-tool
  
  tasks:
    - name: Install rclone
      ansible.builtin.include_role:
        name: ansible-rclone
      vars:
        rclone_version: "1.60.0"
        rclone_arch: "amd64"
        install_manpages: "true"
        rclone_config_location: "/home/centos/.config/rclone/rclone.conf"


- name: Setup files-url-updater config and cronjob so to load latest DB backup in RDS daily
  hosts: name_bastion_server_{{gigadb_env}}*
  tags:
    - files-url-updater
  vars:
    target_host: _bastion

  tasks:
    - name: Create a backups directory for storing database dump files
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: centos
        group: centos
      loop:
        - "/home/centos/downloads"
        - "/home/centos/converted"
        - "/home/centos/restore"

    - name: Install new wrapper script to reset database
      ansible.builtin.copy:
        src: "../../../../gigadb/app/tools/files-url-updater/databaseReset.sh"
        dest: /usr/local/bin/databaseReset
        owner: centos
        group: centos
        mode: a+x

    - name: Create a bin and log directory (for composer and cronjob logging) if it does not exist
      ansible.builtin.file:
        path: "/home/centos/{{ item }}"
        state: directory
        mode: '0755'
        owner: centos
        group: centos
      loop:
        - "logs"

    - name: Setup cronjob to reset database daily after a new backup is available on the ftp server
      ansible.builtin.cron:
        name: "Reset database every day after a new backup is available on the ftp server"
        minute: "05"
        hour: "10"
        user: "centos"
        job: "/usr/local/bin/databaseReset 2> $HOME/logs/errors.log 1> $HOME/logs/output.log"
        state: "{{ reset_database_cronjob_state }}"

    - name: Install docker-compose
      pip:
        name: docker-compose==1.23

    - name: Create .env with RDS DSN
      template:
        src: ../../../../gigadb/app/tools/files-url-updater/bastion-env.j2
        dest: /home/centos/.env
        owner: root
        group: root
        mode: 0644


