- name: Allow centos user to use docker (add centos to group)
  command: usermod -aG docker centos

- name: Enable systemd service
  command: systemctl enable docker

- name: Creates directory
  file:
    path: /etc/systemd/system/docker.service.d/
    state: directory

- name: Create an override for docker systemd service
  copy:
    src: override.conf
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: 0644

- name: Reload systemd docker service
  command: systemctl daemon-reload

- name: Restart systemd docker service
  command: systemctl restart docker.service

- name: Backup the CA
  fetch:
    src: /home/centos/.docker/ca.pem
    dest: output/certs-{{ inventory_hostname }}/
    flat: yes

- name: Backup the cert
  fetch:
    src: /home/centos/.docker/cert.pem
    dest: output/certs-{{ inventory_hostname }}/
    flat: yes

- name: Backup the key
  fetch:
    src: /home/centos/.docker/key.pem
    dest: output/certs-{{ inventory_hostname }}/
    flat: yes

- name: copy the content of the CA pem
  slurp:
    src: /home/centos/.docker/ca.pem
  register: ca_pem

- name: copy the content of the cert pem
  slurp:
    src: /home/centos/.docker/cert.pem
  register: cert_pem

- name: copy the content of the key pem
  slurp:
    src: /home/centos/.docker/key.pem
  register: key_pem

- name: Copy the CA pem to GITLAB CI environment variable (first time)
  uri:
    url: "{{ gitlab_url }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    body:
      key: "{{ gigadb_environment }}_tlsauth_ca"
      value: "{{ ca_pem['content'] | b64decode }}"
    status_code:
      - 201
      - 400
  register: ca_post_outcome

- name: Copy the CA pem to GITLAB CI environment variable (subsequently)
  uri:
    url: "{{ gitlab_url }}/variables/{{ gigadb_environment }}_tlsauth_ca"
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    body:
      value: "{{ ca_pem['content'] | b64decode }}"
    status_code: 200
    register: ca_put_outcome
  when: ca_post_outcome.status == 400

- name: Copy the cert pem to GITLAB CI environment variable
  uri:
    url: "{{ gitlab_url }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
      # Content-Type: application/x-www-form-urlencoded
    body_format: json
    body:
      key: "{{ gigadb_environment }}_tlsauth_cert"
      value: "{{ cert_pem['content'] | b64decode }}"
    status_code:
      - 201
      - 400
  register: cert_post_outcome

- name: Copy the cert pem to GITLAB CI environment variable (subsequently)
  uri:
    url: "{{ gitlab_url }}/variables/{{ gigadb_environment }}_tlsauth_cert"
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    body:
      value: "{{ cert_pem['content'] | b64decode }}"
    status_code: 200
    register: cert_put_outcome
  when: cert_post_outcome.status == 400

- name: Copy the key pem to GITLAB CI environment variable
  uri:
    url: "{{ gitlab_url }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
      # Content-Type: application/x-www-form-urlencoded
    body_format: json
    body:
      key: "{{ gigadb_environment }}_tlsauth_key"
      value: "{{ key_pem['content'] | b64decode }}"
    status_code:
      - 201
      - 400
  register: key_post_outcome

- name: Copy the key pem to GITLAB CI environment variable (subsequently)
  uri:
    url: "{{ gitlab_url }}/variables/{{ gigadb_environment }}_tlsauth_key"
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    body:
      value: "{{ key_pem['content'] | b64decode }}"
    status_code: 200
    register: key_put_outcome
  when: key_post_outcome.status == 400

- name: copy the private ip address to GITLAB CI environment variable (first time)
  uri:
    url: "{{ gitlab_url }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
      # Content-Type: application/x-www-form-urlencoded
    body_format: json
    body:
      key: "{{ gigadb_environment }}_private_ip"
      value: "{{ ansible_eth0.ipv4.address }}"
    status_code:
      - 201
      - 400
  register: private_ip_post_outcome

- name: copy the private ip address to GITLAB CI environment variable (subsequently)
  uri:
    url: "{{ gitlab_url }}/variables/{{ gigadb_environment }}_private_ip"
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    body:
      value: "{{ ansible_eth0.ipv4.address }}"
    status_code: 200
    register: private_ip_put_outcome
  when: private_ip_post_outcome.status == 400

- name: copy the public ip address to GITLAB CI environment variable (first time)
  uri:
    url: "{{ gitlab_url }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
      # Content-Type: application/x-www-form-urlencoded
    body_format: json
    body:
      key: "{{ gigadb_environment }}_public_ip"
      value: "{{ inventory_hostname }}"
    status_code:
      - 201
      - 400
  register: public_ip_post_outcome

- name: copy the public ip address to GITLAB CI environment variable (subsequently)
  uri:
    url: "{{ gitlab_url }}/variables/{{ gigadb_environment }}_public_ip"
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    body:
      value: "{{ inventory_hostname }}"
    status_code: 200
    register: public_ip_put_outcome
  when: public_ip_post_outcome.status == 400
