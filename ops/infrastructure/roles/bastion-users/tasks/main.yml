- debug: msg="{{ newuser }}"

- name: Add curator user
  ansible.builtin.user:
    name: "{{ newuser }}"
    shell: /bin/bash
    groups: centos
    append: yes

- name: Create a .ssh and uploadDir directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ newuser }}"
    group: "{{ newuser }}"
    mode: '0700'
  loop:
    - "/home/{{ newuser }}/.ssh"
    - "/home/{{ newuser }}/uploadDir"

- name: Create directory to store keys
  ansible.builtin.file:
    path: "/home/centos/{{ newuser }}.keys"
    state: directory
    owner: centos
    group: centos

- name: Add curator to sudoers
  ansible.builtin.lineinfile:
    path: "/etc/sudoers.d/91-add-{{ newuser }}"
    line: "{{ newuser }} ALL=(ALL)       NOPASSWD: /usr/local/bin/datasetUpload, /usr/local/bin/postUpload, /usr/local/bin/calculateChecksumSizes, /usr/local/bin/createReadme, /usr/local/bin/filesMetaToDb, /usr/local/bin/transfer\n"
    owner: root
    group: root
    mode: 440
    create: yes

- name: check if public key exists in GitLab CI environment variable
  ansible.builtin.uri:
    url: "{{ gitlab_url }}/variables/bastion_authorized_keys_{{ newuser }}?filter%5benvironment_scope%5d={{ gigadb_environment }}"
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    status_code:
      - 200
      - 404
  register: public_key_in_gitlab

- debug:
    msg: "{{ public_key_in_gitlab.status }}"

- name: check if public key exists in bastion server
  ansible.builtin.stat:
    path: "/home/{{ newuser }}/.ssh/authorized_keys"
  register: public_key_in_bastion

- debug:
    msg: "{{ public_key_in_bastion.stat.exists }}"

- name: generate private/public key pair and download private key
  block:
    - name: generate key pair
      community.crypto.openssh_keypair:
        path: "/home/centos/{{ newuser }}.keys/id_ssh_rsa"
        owner: centos
      register: pk

    - debug:
        msg: "{{ pk }}"

    - name: download private key
      ansible.builtin.fetch:
        src: "/home/centos/{{ newuser }}.keys/id_ssh_rsa"
        dest: "output/privkeys-{{ inventory_hostname }}/{{ newuser }}"
        flat: yes
      when: pk.failed == false

    - name: Add public key to authorized keys
      ansible.builtin.copy:
        content: "{{ pk.public_key }}"
        dest: "/home/{{ newuser }}/.ssh/authorized_keys"
        owner: "{{ newuser }}"
        group: "{{ newuser }}"
        mode: g-rw,o-rw

    - name: save ssh public key to GitLab CI environment variable (for newly created user)
      ansible.builtin.uri:
        url: "{{ gitlab_url }}/variables"
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_private_token }}"
        body_format: json
        body:
          key: "bastion_authorized_keys_{{ newuser }}"
          value: "{{ pk.public_key }}"
          environment_scope: "{{ gigadb_environment }}"
        status_code:
          - 201
      register: save_pk_to_gitlab

    - debug:
        msg: "{{ save_pk_to_gitlab.status }}"
  when: (public_key_in_bastion.stat.exists == false and public_key_in_gitlab.status == 404)

- name: copy ssh public key and save it to GitLab CI environment variable (for existing user)
  block:
    - name: copy ssh public key
      slurp:
        src: "/home/{{ newuser }}/.ssh/authorized_keys"
      register: existing_public_key

    - name: save ssh public key to GitLab CI environment variable
      ansible.builtin.uri:
        url: "{{ gitlab_url }}/variables"
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_private_token }}"
        body_format: json
        body:
          key: "bastion_authorized_keys_{{ newuser }}"
          value: "{{ existing_public_key['content'] | b64decode}}"
          environment_scope: "{{ gigadb_environment }}"
        status_code:
          - 201
      register: save_pk_to_gitlab

    - debug:
        msg: "{{ save_pk_to_gitlab.status }}"
  when: (public_key_in_bastion.stat.exists == true and public_key_in_gitlab.status == 404)

- name: download public key from GitLab CI environment variable and copy it to authorized file
  block:
    - name: get public key
      ansible.builtin.uri:
        url: "{{ gitlab_url }}/variables/bastion_authorized_keys_{{ newuser }}?filter%5benvironment_scope%5d={{ gigadb_environment }}"
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_private_token }}"
        body_format: json
        status_code:
          - 200
      register: public_key_from_gl

    - name: copy public key
      ansible.builtin.copy:
        content: "{{ public_key_from_gl.json.value  }}"
        dest: "/home/{{ newuser }}/.ssh/authorized_keys"
        owner: "{{ newuser }}"
        group: "{{ newuser }}"
        mode: g-rw,o-rw
  when: (public_key_in_bastion.stat.exists == false and public_key_in_gitlab.status == 200)

- name: Create credentials file for user
  block:
  - name: Read credentials from CSV file and return a dictionary
    community.general.read_csv:
      path: "{{ credentials_csv_path }}"
    register: credentials
    delegate_to: localhost

  - ansible.builtin.debug:
      msg: "{{credentials.list.0}}"

  - name: Create a .aws directory for the new user
    ansible.builtin.file:
      path: "/home/{{ newuser }}/.aws"
      state: directory
      mode: '0755'
      owner: "{{ newuser }}"
      group: "{{ newuser }}"


  - name: Create AWS credential file for access to Wasabi using rclone
    template:
      src: ./credentials.j2
      dest: "/home/{{ newuser }}/.aws/credentials"
      owner: "{{ newuser }}"
      group: "{{ newuser }}"
      mode: 0644

  - name: Create a rclone directory for user
    ansible.builtin.file:
      path: "/home/{{ newuser }}/.config/rclone"
      state: directory
      mode: '0755'
      owner: "{{ newuser }}"
      group: "{{ newuser }}"

  - name: Create rclone config for user
    template:
      src: ./rclone-user.conf.j2
      dest: "/home/{{ newuser }}/.config/rclone/rclone.conf"
      owner: "{{ newuser }}"
      group: "{{ newuser }}"
      mode: 0644
  when: credentials_csv_path is defined

- name: Create env file for user to backup
  ansible.builtin.template:
    src: ../../../../gigadb/app/tools/transfer-files/config-sources/files-env.j2
    dest: "/home/{{ newuser }}/files-env"
    owner: "{{ newuser }}"
    group: "{{ newuser }}"
    mode: 0644

- name: Restart systemd sshd service
  command: systemctl restart sshd.service
